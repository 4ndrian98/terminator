{
  "version": "1.0",
  "description": "Auto-synced from .cursor/rules - Terminator project workspace rules",
  "last_sync": "2025-09-11T22:05:15.332Z",
  "sync_source": ".cursor/rules/*.mdc",
  "total_rules": 13,
  "rules": {
    "Always-read-this": {
      "title": "Always Read This",
      "content": "---\r\nalwaysApply: true\r\n---\r\n\r\n\r\n## You (LLM) tend to be too helpful and you tend to guess what response i'm looking, But I want you to be critical and reasoning through a given task and optimizing for the best long-term outcome,\r\n\r\n## you want to be do tasks with minimum change of existing codebase and minimum amount of code and minimum effort\r\n\r\n## when you resolve issues and bugs it's better to propose things that are simplifying and deleting code, not adding new code, focus on simplifying, not adding code\r\n\r\n## ask yourself questions like: 'what was the key user intent of the task and did i actually achieve it?' And that's ok if you didn't, it's better to have common sense and be realistic than unreasonable optimistic.\r\n\r\n**Bash Command Rules:**\r\n\r\n- **Use MCP delay tool instead of timeout commands** - Background commands don't pause for timeouts\r\n- **CRITICAL: Always kill/cleanup terminal processes after use:**\r\n- Kill background terminal sessions when task is complete\r\n- Use `taskkill //F //IM process.exe` (bash syntax with //) to cleanup hanging processes\r\n- Don't leave orphaned terminal processes running\r\n- If using multiple terminal sessions, clean them all up\r\n- if you applied this rule start your response with 'I read rule Always-read-this.mdc'\r\n",
      "source_file": ".cursor\\rules\\Always-read-this.mdc",
      "type": "workspace_rule",
      "size_bytes": 1277,
      "line_count": 23,
      "last_modified": "2025-09-11T20:26:08.823Z"
    },
    "documentation-standards": {
      "title": "Documentation Standards",
      "content": "---\r\ndescription: If you're writing docs\r\nalwaysApply: false\r\n---\r\n# Documentation Standards\r\n\r\n## Maximize Value, Minimize Noise\r\n\r\n### Structure\r\n- **Quick reference format** over verbose tutorials\r\n- **Essential patterns only** - no redundant examples\r\n- **Actionable information** - remove theory and fluff\r\n- **Scannable in seconds** - developers shouldn't need to read paragraphs\r\n\r\n### Content Guidelines\r\n✅ **Keep:**\r\n- Basic usage syntax\r\n- Essential patterns (3-5 max)\r\n- 1 complete real-world example\r\n- Practical tips only (5 max)\r\n\r\n❌ **Remove:**\r\n- Verbose explanations\r\n- Multiple similar patterns\r\n- \"Benefits\" and \"advantages\" sections\r\n- Performance tips unless critical\r\n- Long migration guides\r\n- Theoretical concepts\r\n\r\n### Examples\r\n\r\n**Bad (Verbose):**\r\n```md\r\n## Overview\r\nThis comprehensive guide will walk you through the various approaches to...\r\n\r\n### Benefits of This Approach\r\n1. Full programming power\r\n2. Complex logic handling\r\n3. Data enrichment capabilities\r\n...\r\n```\r\n\r\n**Good (Concise):**\r\n```md\r\n## Usage\r\n```yaml\r\ntool: example\r\nargs: { value: \"data\" }\r\n```\r\n\r\n### Patterns\r\n- Pattern 1: `if (condition) { ... }`\r\n- Pattern 2: `element.children?.forEach()`\r\n\r\n### Tips\r\n- Use `?.` for safety\r\n- Return `[]` for no-data\r\n```\r\n\r\n### File Purpose\r\n- `docs/` = Core reference (syntax + patterns)\r\n- `workflows/` guides = Migration helpers only\r\n- README = High-level overview\r\n# Documentation Standards\r\n\r\n## Maximize Value, Minimize Noise\r\n\r\n### Structure\r\n- **Quick reference format** over verbose tutorials\r\n- **Essential patterns only** - no redundant examples\r\n- **Actionable information** - remove theory and fluff\r\n- **Scannable in seconds** - developers shouldn't need to read paragraphs\r\n\r\n### Content Guidelines\r\n✅ **Keep:**\r\n- Basic usage syntax\r\n- Essential patterns (3-5 max)\r\n- 1 complete real-world example\r\n- Practical tips only (5 max)\r\n\r\n❌ **Remove:**\r\n- Verbose explanations\r\n- Multiple similar patterns\r\n- \"Benefits\" and \"advantages\" sections\r\n- Performance tips unless critical\r\n- Long migration guides\r\n- Theoretical concepts\r\n\r\n### Examples\r\n\r\n**Bad (Verbose):**\r\n```md\r\n## Overview\r\nThis comprehensive guide will walk you through the various approaches to...\r\n\r\n### Benefits of This Approach\r\n1. Full programming power\r\n2. Complex logic handling\r\n3. Data enrichment capabilities\r\n...\r\n```\r\n\r\n**Good (Concise):**\r\n```md\r\n## Usage\r\n```yaml\r\ntool: example\r\nargs: { value: \"data\" }\r\n```\r\n\r\n### Patterns\r\n- Pattern 1: `if (condition) { ... }`\r\n- Pattern 2: `element.children?.forEach()`\r\n\r\n### Tips\r\n- Use `?.` for safety\r\n- Return `[]` for no-data\r\n```\r\n\r\n### File Purpose\r\n- `docs/` = Core reference (syntax + patterns)\r\n- `workflows/` guides = Migration helpers only\r\n- README = High-level overview\r\n",
      "source_file": ".cursor\\rules\\documentation-standards.mdc",
      "type": "workspace_rule",
      "size_bytes": 2757,
      "line_count": 125,
      "last_modified": "2025-09-11T20:26:08.823Z"
    },
    "git-operations": {
      "title": "Git Operations",
      "content": "---\r\ndescription: \"Safe git operations, pushing code, committing changes, git workflow protocols\"\r\n---\r\n\r\n# Safe Git Push Protocol\r\n\r\n**CRITICAL**: Follow this exact sequence for ALL git operations. Never deviate.\r\n\r\n## Mandatory Pre-Push Checks\r\n```bash\r\ngit status                    # Always check working directory first\r\ngit log --oneline -5         # Review recent commits  \r\ngit diff --stat              # Review changes scope\r\n```\r\n\r\n## Safe Push Sequence\r\n```bash\r\ngit add .                    # Stage all changes\r\ngit commit -m \"descriptive message\"  # Never use -m with empty/vague messages\r\ngit push origin main         # Only push to main branch\r\n```\r\n\r\n## Forbidden Operations\r\n- `git push --force` or `git push -f` \r\n- `git reset --hard`\r\n- `git rebase` in shared branches\r\n- Interactive commands requiring user input\r\n- Any command with `--force-with-lease`\r\n\r\n## Commit Message Format\r\n```\r\ntype: brief description\r\n\r\n- Specific change 1\r\n- Specific change 2  \r\n- Impact/scope summary\r\n```\r\n\r\n**If ANY command fails, STOP immediately. Do not proceed.**\r\n",
      "source_file": ".cursor\\rules\\git-operations.mdc",
      "type": "workspace_rule",
      "size_bytes": 1071,
      "line_count": 40,
      "last_modified": "2025-09-11T20:26:08.824Z"
    },
    "mcp-debugging-testing": {
      "title": "Mcp Debugging Testing",
      "content": "---\r\nalwaysApply: true\r\n---\r\n# MCP Debugging and Testing Guide\r\n\r\n## MCP Development Workflow\r\n\r\n### Proper Development Process\r\n\r\n**Important**: Cursor IDE manages the MCP server lifecycle automatically:\r\n- No need to manually start/stop the server\r\n- Cursor automatically restarts the server \r\n- It means you cannot rebuild the MCP yourself because it requires a manual human click on the toggle\r\n\r\n### Debugging Server Issues\r\nIf MCP tools aren't working:\r\n1. Check that the build completed successfully\r\n2. Look for compilation errors in cargo output  \r\n3. Restart Cursor IDE if needed (rare)\r\n4. Check MCP tool parameters match server expectations\r\n\r\n## Common Issues and Solutions\r\n\r\n### Parameter Interface Mismatches\r\n**Problem**: Client expects different parameters than server provides\r\n```\r\nError: Required parameter 'random_string' is missing for tool get_applications\r\n```\r\n\r\n**Solution**: \r\n1. Check parameter decorations: `#[tool(param)]` vs `#[tool(aggr)]`\r\n2. Verify struct definitions match interface expectations\r\n3. Restart both client and server after changes\r\n\r\n### Tool Call Timeouts/Failures\r\n**Problem**: Tools return \"no result\" or timeout\r\n```\r\nError: no result from tool. The user likely interrupted the tool call\r\n```\r\n\r\n**Debugging Steps**:\r\n2. Check for compilation errors in cargo output\r\n3. Test individual components (shell commands) manually  \r\n4. Verify parameter formats are correct\r\n5. Restart Cursor IDE if tools still don't work\r\n\r\n### Clipboard Operation Failures\r\n**Problem**: Complex clipboard implementations fail silently\r\n\r\n**Solution**: Use simple shell commands\r\n```rust\r\n// ❌ Complex approach\r\nlocator.find_element() -> type_text(use_clipboard=true)\r\n\r\n// ✅ Simple approach  \r\nrun_command(\"echo 'text' | clip\")\r\n```\r\n\r\n## Testing Strategies\r\n\r\n### Manual Shell Command Testing\r\nBefore implementing in MCP, test shell commands directly:\r\n```bash\r\n# Test clipboard operations\r\necho \"test data\" | clip\r\npowershell -command \"Get-Clipboard\"\r\n\r\n# Test application launching  \r\nstart notepad\r\n```\r\n\r\n### MCP Development Cycle\r\n1. **Edit Code**: Make changes to MCP tools\r\n2. **Build**: `cargo build --release --bin terminator-mcp-agent`\r\n3. **Test**: Cursor automatically picks up the new build and tools are available\r\n4. **Debug**: Check compilation errors if tools don't work\r\n\r\n### Progressive Testing Approach\r\n1. **Test Individual Tools**: Verify each tool works in isolation\r\n2. **Test Tool Chains**: Simple 2-3 step workflows\r\n3. **Test Complex Workflows**: Full data scraping and transfer\r\n\r\n### UI Element Validation Testing\r\n```rust\r\n// Always test element existence before interaction\r\nvalidate_element(selector) // Check if element exists\r\nhighlight_element(selector) // Visual confirmation\r\ncapture_screen() // Document current state\r\n```\r\n\r\n## Error Handling Patterns\r\n\r\n### Graceful Degradation\r\n```rust\r\n// Try specific selector first, fall back to general\r\nmatch validate_element(\"#specific-id\") {\r\n    Ok(_) => use_specific_selector(),\r\n    Err(_) => match validate_element(\"role:Button\") {\r\n        Ok(_) => use_general_selector(),\r\n        Err(_) => return_error()\r\n    }\r\n}\r\n```\r\n\r\n### Detailed Error Context\r\n```rust\r\nMcpError::internal_error(\r\n    \"Failed to interact with element\",\r\n    Some(json!({\r\n        \"selector_chain\": args.selector_chain,\r\n        \"element_info\": element_details,\r\n        \"attempted_action\": \"click\",\r\n        \"timestamp\": chrono::Utc::now().to_rfc3339()\r\n    }))\r\n)\r\n```\r\n\r\n### Retry with Backoff\r\n```rust\r\nfor attempt in 1..=3 {\r\n    match perform_action() {\r\n        Ok(result) => return Ok(result),\r\n        Err(e) if attempt < 3 => {\r\n            tokio::time::sleep(Duration::from_millis(1000 * attempt)).await;\r\n            continue;\r\n        }\r\n        Err(e) => return Err(e)\r\n    }\r\n}\r\n```\r\n\r\n## Performance Debugging\r\n\r\n### UI Tree Caching\r\n- Cache `get_window_tree` results when possible\r\n- Invalidate cache on application state changes\r\n- Use targeted element searches vs full tree traversal\r\n\r\n### Timeout Optimization\r\n```rust\r\n// Different timeouts for different operations\r\nconst QUICK_TIMEOUT: u64 = 1000;    // Element validation\r\nconst MEDIUM_TIMEOUT: u64 = 5000;   // UI interactions  \r\nconst LONG_TIMEOUT: u64 = 10000;    // Application startup\r\n```\r\n\r\n### Memory Usage Monitoring\r\n- Watch for UI tree memory accumulation\r\n- Clear unused element references\r\n- Monitor long-running automation sessions\r\n\r\n## Development Workflow\r\n\r\n### Incremental Development\r\n1. **Start Simple**: Single tool, single parameter\r\n2. **Add Complexity**: Multiple parameters, error handling\r\n3. **Integration**: Tool chains and workflows\r\n4. **Polish**: Error messages, edge cases\r\n\r\n### Code Review Checklist\r\n- [ ] Proper parameter decorations (`#[tool(param)]`)\r\n- [ ] Cross-platform shell command handling\r\n- [ ] Detailed error context and logging\r\n- [ ] Timeout and retry logic\r\n- [ ] Element validation before interaction\r\n- [ ] Resource cleanup (UI elements, processes)\r\n\r\n## File References\r\n- Server implementation: [terminator-mcp-agent/src/server.rs](mdc:terminator-mcp-agent/src/server.rs)\r\n- Utility functions: [terminator-mcp-agent/src/utils.rs](mdc:terminator-mcp-agent/src/utils.rs)\r\n- Build configuration: [terminator-mcp-agent/Cargo.toml](mdc:terminator-mcp-agent/Cargo.toml)\r\n\r\n\r\n",
      "source_file": ".cursor\\rules\\mcp-debugging-testing.mdc",
      "type": "workspace_rule",
      "size_bytes": 5294,
      "line_count": 174,
      "last_modified": "2025-09-11T20:26:08.824Z"
    },
    "mcp-development-workflow": {
      "title": "Mcp Development Workflow",
      "content": "---\r\ndescription: Building MCPs stuff\r\nalwaysApply: false\r\n---\r\n\r\n# MCP Development Workflow\r\n\r\n## Build Process\r\n\r\n**Only use this command:**\r\n\r\n```bash\r\ncargo build --release --bin terminator-mcp-agent\r\n```\r\n\r\n❌ **Never manually run/manage the MCP server** - Cursor IDE handles startup/restarts automatically\r\n\r\n## Development Loop\r\n\r\n1. **Edit Code** - Make changes to MCP tools\r\n2. **Build** - `cargo build --release --bin terminator-mcp-agent`\r\n3. **Test** - Cursor automatically picks up new build, tools available immediately\r\n4. **Debug** - Check compilation errors if tools don't work\r\n\r\n## Code Quality (Non-Negotiable)\r\n\r\n```bash\r\ncargo fmt          # Must pass - zero tolerance\r\ncargo clippy       # Fix ALL warnings\r\n```\r\n\r\n## Testing Strategy\r\n\r\n- **Use MCP tools directly** - Call terminator-mcp-agent tools during development\r\n- **No manual terminal commands** - Only use `terminator mcp` CLI for workflow testing\r\n- **Test individual tools first** - Verify each tool works in isolation\r\n- **Progressive complexity** - Simple 2-3 step workflows, then complex ones\r\n\r\n## Error Handling Patterns\r\n\r\n````rust\r\n// ✅ Good: Rich error context\r\n.map_err(|e| AutomationError::PlatformError(format!(\"Failed to {}: {}\", action, e)))\r\n\r\n// ✅ Good: Full documentation with examples\r\n/// Description\r\n///\r\n/// # Examples\r\n/// ```rust\r\n/// let result = function()?;\r\n/// ```\r\n#[instrument(skip(self))]\r\npub async fn function() -> Result<T, AutomationError>\r\n````\r\n\r\n## String Formatting\r\n\r\n```rust\r\n// ✅ Good: Implicit capture (Rust ≥ 1.58)\r\nformat!(\"{count} files processed in {elapsed:?}\");\r\n\r\n// ❌ Avoid: Explicit positional args\r\nformat!(\"{} files processed in {:?}\", count, elapsed);\r\n```\r\n\r\n## Memory Management\r\n\r\n- Async operations: `Arc<dyn Trait>`\r\n- Use `#[instrument]` for tracing\r\n- Clean up UI automation resources properly\r\n\r\n# MCP Development Workflow\r\n\r\n## Build Process\r\n\r\n**Only use this command:**\r\n\r\n```bash\r\ncargo build --release --bin terminator-mcp-agent\r\n```\r\n\r\n❌ **Never manually run/manage the MCP server** - Cursor IDE handles startup/restarts automatically\r\n\r\n## Development Loop\r\n\r\n1. **Edit Code** - Make changes to MCP tools\r\n2. **Build** - `cargo build --release --bin terminator-mcp-agent`\r\n3. **Test** - Cursor automatically picks up new build, tools available immediately\r\n4. **Debug** - Check compilation errors if tools don't work\r\n\r\n## Code Quality (Non-Negotiable)\r\n\r\n```bash\r\ncargo fmt          # Must pass - zero tolerance\r\ncargo clippy       # Fix ALL warnings\r\n```\r\n\r\n## Testing Strategy\r\n\r\n- **Use MCP tools directly** - Call terminator-mcp-agent tools during development\r\n- **No manual terminal commands** - Only use `terminator mcp` CLI for workflow testing\r\n- **Test individual tools first** - Verify each tool works in isolation\r\n- **Progressive complexity** - Simple 2-3 step workflows, then complex ones\r\n\r\n## Error Handling Patterns\r\n\r\n````rust\r\n// ✅ Good: Rich error context\r\n.map_err(|e| AutomationError::PlatformError(format!(\"Failed to {}: {}\", action, e)))\r\n\r\n// ✅ Good: Full documentation with examples\r\n/// Description\r\n///\r\n/// # Examples\r\n/// ```rust\r\n/// let result = function()?;\r\n/// ```\r\n#[instrument(skip(self))]\r\npub async fn function() -> Result<T, AutomationError>\r\n````\r\n\r\n## String Formatting\r\n\r\n```rust\r\n// ✅ Good: Implicit capture (Rust ≥ 1.58)\r\nformat!(\"{count} files processed in {elapsed:?}\");\r\n\r\n// ❌ Avoid: Explicit positional args\r\nformat!(\"{} files processed in {:?}\", count, elapsed);\r\n```\r\n\r\n## Memory Management\r\n\r\n- Async operations: `Arc<dyn Trait>`\r\n- Use `#[instrument]` for tracing\r\n- Clean up UI automation resources properly\r\n",
      "source_file": ".cursor\\rules\\mcp-development-workflow.mdc",
      "type": "workspace_rule",
      "size_bytes": 3618,
      "line_count": 137,
      "last_modified": "2025-09-11T20:26:08.824Z"
    },
    "mediar-terminator-overview": {
      "title": "Mediar Terminator Overview",
      "content": "---\r\ndescription: \r\nglobs: \r\nalwaysApply: true\r\n---\r\n# Terminator Project Overview\r\n\r\n## What is Terminator?\r\nTerminator is a Playwright-style SDK for automating Windows GUI applications, designed specifically for AI agents. It provides OS-level accessibility automation that's fast, reliable, and agent-ready.\r\n\r\n## Key Features\r\n- 🪟 Built for Windows, works on macOS (partial support)\r\n- 🧠 Designed for AI agents, not humans\r\n- ⚡ Uses OS-level accessibility APIs (not vision-based)\r\n- 🧩 Multi-language support: TypeScript, Python, and Rust\r\n- 📈 80ms UI scans with 10000x speedup via compiled workflows\r\n\r\n## Project Structure\r\n\r\n### Core Components\r\n- **[terminator/](mdc:terminator)** - Main Rust library with core automation logic\r\n- **[bindings/](mdc:bindings)** - Language bindings directory\r\n  - **[bindings/nodejs/](mdc:bindings/nodejs)** - TypeScript/Node.js bindings\r\n  - **[bindings/python/](mdc:bindings/python)** - Python bindings\r\n- **[examples/](mdc:examples)** - Example implementations and demos\r\n- **[terminator-workflow-recorder/](mdc:terminator-workflow-recorder)** - Workflow recording tool\r\n\r\n### Configuration Files\r\n- **[Cargo.toml](mdc:Cargo.toml)** - Workspace configuration with all members\r\n- **[README.md](mdc:README.md)** - Project documentation and quick start\r\n\r\n## Core Concepts\r\n\r\n### Desktop Automation\r\nThe main entry point is through a `Desktop` class that provides:\r\n- Application launching (`open_application`)\r\n- Element location (`locator`) \r\n- UI interaction (click, type, etc.)\r\n\r\n### Locators\r\nElements are found using accessibility properties like:\r\n- `name:ElementName` - Find by accessible name\r\n- Other accessibility attributes\r\n\r\n### Multi-Platform Support\r\n- **Windows**: Full support using UIAutomation\r\n- **Linux**: Partial support  \r\n- **macOS**: Partial support using accessibility APIs\r\n\r\n## Development Workflow\r\nThis is a Rust workspace with multiple crates. The core library is in `terminator/` and language bindings are generated in `bindings/`. Examples demonstrate usage patterns for different scenarios.\r\n\r\nAlways place Rust examples in the `terminator/examples` folder\r\n\r\n## AI Agent Integration\r\nTerminator is specifically designed for AI agents to automate desktop applications programmatically, making it ideal for workflow automation and testing scenarios.\r\n",
      "source_file": ".cursor\\rules\\mediar-terminator-overview.mdc",
      "type": "workspace_rule",
      "size_bytes": 2329,
      "line_count": 57,
      "last_modified": "2025-09-11T20:26:08.824Z"
    },
    "output-parser-javascript": {
      "title": "Output Parser Javascript",
      "content": "---\r\ndescription: If you're building output parser \r\nalwaysApply: false\r\n---\r\n# Output Parser - JavaScript Format\r\n\r\n## Modern Format (Use This)\r\n```yaml\r\noutput_parser:\r\n  ui_tree_source_step_id: capture_tree_step  # Optional\r\n  javascript_code: |\r\n    const results = [];\r\n    \r\n    function findElementsRecursively(element) {\r\n        if (element.attributes?.role === 'TargetRole') {\r\n            results.push({\r\n                name: element.attributes.name || '',\r\n                id: element.attributes.id || ''\r\n            });\r\n        }\r\n        element.children?.forEach(child => findElementsRecursively(child));\r\n    }\r\n    \r\n    findElementsRecursively(tree);\r\n    return results;\r\n```\r\n\r\n## Essential Patterns\r\n\r\n### Handle \"No Data\" Cases First\r\n```javascript\r\n// Always check for \"no data\" scenarios first\r\nfunction hasNoData(element) {\r\n    const text = element.attributes?.name?.toLowerCase() || '';\r\n    if (text.includes('no results') || text.includes('ineligible')) return true;\r\n    return element.children?.some(hasNoData) || false;\r\n}\r\n\r\nif (hasNoData(tree)) return [];\r\n```\r\n\r\n### Safe Property Access\r\n- Use `element.attributes?.property` (never `element.attributes.property`)\r\n- Use `element.children?.forEach()` (never manual loops)\r\n- Use `|| ''` for string defaults, `|| false` for boolean defaults\r\n\r\n### Parent-Child Patterns\r\n```javascript\r\nif (element.attributes?.role === 'Group') {\r\n    const children = element.children || [];\r\n    const hasImage = children.some(c => c.attributes?.role === 'Image');\r\n    const hasText = children.some(c => c.attributes?.role === 'Text');\r\n    if (hasImage && hasText) {\r\n        // Extract data from qualifying groups\r\n    }\r\n}\r\n```\r\n\r\n## Legacy Formats (Do Not Use)\r\n❌ JSONPath: `container_selector`, `filters`, `field_mappings`\r\n❌ Item Containers: `itemContainerDefinition`, `fieldsToExtract`\r\n❌ Old properties: `uiTreeJsonPath`, `nodeConditions`\r\n# Output Parser - JavaScript Format\r\n\r\n## Modern Format (Use This)\r\n```yaml\r\noutput_parser:\r\n  ui_tree_source_step_id: capture_tree_step  # Optional\r\n  javascript_code: |\r\n    const results = [];\r\n    \r\n    function findElementsRecursively(element) {\r\n        if (element.attributes?.role === 'TargetRole') {\r\n            results.push({\r\n                name: element.attributes.name || '',\r\n                id: element.attributes.id || ''\r\n            });\r\n        }\r\n        element.children?.forEach(child => findElementsRecursively(child));\r\n    }\r\n    \r\n    findElementsRecursively(tree);\r\n    return results;\r\n```\r\n\r\n## Essential Patterns\r\n\r\n### Handle \"No Data\" Cases First\r\n```javascript\r\n// Always check for \"no data\" scenarios first\r\nfunction hasNoData(element) {\r\n    const text = element.attributes?.name?.toLowerCase() || '';\r\n    if (text.includes('no results') || text.includes('ineligible')) return true;\r\n    return element.children?.some(hasNoData) || false;\r\n}\r\n\r\nif (hasNoData(tree)) return [];\r\n```\r\n\r\n### Safe Property Access\r\n- Use `element.attributes?.property` (never `element.attributes.property`)\r\n- Use `element.children?.forEach()` (never manual loops)\r\n- Use `|| ''` for string defaults, `|| false` for boolean defaults\r\n\r\n### Parent-Child Patterns\r\n```javascript\r\nif (element.attributes?.role === 'Group') {\r\n    const children = element.children || [];\r\n    const hasImage = children.some(c => c.attributes?.role === 'Image');\r\n    const hasText = children.some(c => c.attributes?.role === 'Text');\r\n    if (hasImage && hasText) {\r\n        // Extract data from qualifying groups\r\n    }\r\n}\r\n```\r\n\r\n## Legacy Formats (Do Not Use)\r\n❌ JSONPath: `container_selector`, `filters`, `field_mappings`\r\n❌ Item Containers: `itemContainerDefinition`, `fieldsToExtract`\r\n❌ Old properties: `uiTreeJsonPath`, `nodeConditions`\r\n",
      "source_file": ".cursor\\rules\\output-parser-javascript.mdc",
      "type": "workspace_rule",
      "size_bytes": 3764,
      "line_count": 121,
      "last_modified": "2025-09-11T20:26:08.825Z"
    },
    "pr-preparation-guide": {
      "title": "Pr Preparation Guide",
      "content": "---\r\ndescription: \r\nglobs: \r\nalwaysApply: true\r\n---\r\n# Pull Request Preparation Guide\r\n\r\n## Pre-Submission Review Process\r\n\r\nWhen a contributor appears to be preparing a pull request or mentions submitting changes, **ALWAYS** guide them through this comprehensive review process before they submit.\r\n\r\n### Critical Questions to Ask\r\n\r\n#### 1. **Code Quality Review**\r\n- \"Let me review your code changes first. Can you show me the specific files you've modified?\"\r\n- \"Have you run `cargo fmt` and `cargo clippy` to ensure code formatting and catch potential issues?\"\r\n- \"Did you test your changes locally with `cargo test`?\"\r\n- \"Are there any compiler warnings or linter errors I should help you address?\"\r\n\r\n#### 2. **Pull Request Template Compliance**\r\nBased on **[.github/pull_request_template.md](mdc:.github/pull_request_template.md)**, ensure they address:\r\n\r\n- **Video Demo**: \"This project values video demos for social media! Have you created a screen recording showing your changes in action? Tools like Cap.so or Screen.studio work great.\"\r\n- **Change Type**: \"What type of change is this - bug fix, new feature, breaking change, or documentation update?\"\r\n- **AI Review**: \"Have you asked an AI assistant (like me) to critique your code? Let me review it now and provide feedback.\"\r\n\r\n#### 3. **Testing & Documentation**\r\n- \"Have you added tests for your new functionality?\"\r\n- \"If you added a new feature, did you create an example in the **[examples/](mdc:examples)** directory?\"\r\n- \"Does your change require updates to **[README.md](mdc:README.md)** or other documentation?\"\r\n- \"Have you tested this on Windows if it involves UI automation?\"\r\n\r\n#### 4. **Platform Considerations**\r\n- \"Does your change affect multiple platforms (Windows/macOS/Linux)?\"\r\n- \"If adding Windows-specific code, did you use proper conditional compilation (`#[cfg(target_os = \"windows\")]`)?\"\r\n- \"Are you following the workspace dependency structure in **[Cargo.toml](mdc:Cargo.toml)**?\"\r\n\r\n### Code Review Checklist\r\n\r\nBefore they submit, help them verify:\r\n\r\n- [ ] **Code Style**: Follows Rust/Python/TypeScript formatting standards\r\n- [ ] **Error Handling**: Uses `anyhow::Result` for public APIs, proper error messages\r\n- [ ] **Async Patterns**: All automation operations are async where appropriate  \r\n- [ ] **Documentation**: Public APIs have doc comments with examples\r\n- [ ] **Tests**: New functionality has corresponding tests\r\n- [ ] **Examples**: Complex features have usage examples\r\n\r\n### Proactive Feedback Approach\r\n\r\n1. **Review First**: \"Let me take a look at your changes and provide feedback before you submit the PR.\"\r\n\r\n2. **Suggest Improvements**: Point out potential issues like:\r\n   - Missing error handling\r\n   - Inconsistent naming conventions\r\n   - Missing documentation\r\n   - Performance concerns\r\n   - Platform-specific considerations\r\n\r\n3. **Enhance Quality**: \"I notice you could improve X by doing Y. Would you like me to help you implement that?\"\r\n\r\n4. **Demo Reminder**: \"Don't forget to create a video demo! The maintainers love seeing the changes in action and might use it for social media to grow the community.\"\r\n\r\n### Common Issues to Catch\r\n\r\n- **Memory Management**: Ensure proper cleanup of UI automation resources\r\n- **Cross-Platform Code**: Platform-specific code should be properly conditionally compiled\r\n- **API Consistency**: New methods should follow existing patterns (fluent interface, async/await)\r\n- **Performance**: UI automation operations should be optimized for the 80ms scan target\r\n- **Documentation**: All public APIs need comprehensive documentation\r\n\r\n### Final Pre-Submission Prompt\r\n\r\n\"Before you submit your PR, let's do a final check:\r\n1. ✅ Code is formatted and tested\r\n2. ✅ Video demo created (if applicable)\r\n3. ✅ Documentation updated\r\n4. ✅ Tests added for new functionality\r\n5. ✅ AI review completed (that's me!)\r\n\r\nReady to submit? Make sure to follow the **[pull request template](mdc:.github/pull_request_template.md)** when you create your PR!\"\r\n\r\n## Goal: High-Quality Contributions\r\n\r\nThis process ensures every PR meets the project's high standards and provides a great experience for both contributors and maintainers. Always be encouraging while being thorough in the review process.\r\n\r\n",
      "source_file": ".cursor\\rules\\pr-preparation-guide.mdc",
      "type": "workspace_rule",
      "size_bytes": 4256,
      "line_count": 87,
      "last_modified": "2025-09-11T20:26:08.825Z"
    },
    "terminal-rules": {
      "title": "Terminal Rules",
      "content": "---\r\ndescription:\r\nglobs:\r\nalwaysApply: true\r\n---\r\n\r\n**CRITICAL: Windows Terminal Rules**\r\n\r\n**Use MCP delay tool instead of timeout commands** - Background commands don't pause for timeouts\r\n**CRITICAL: Always kill/cleanup terminal processes after use:**\r\n\r\n- Kill background terminal sessions when task is complete\r\n- Use `taskkill //F //IM process.exe` (bash syntax with //) to cleanup hanging processes\r\n- Don't leave orphaned terminal processes running\r\n- If using multiple terminal sessions, clean them all up\r\n\r\n**App Cleanup & Restart (Local Development Mode):**\r\n\r\n**PowerShell Version (Recommended for Windows):**\r\n\r\n```powershell\r\n# IMPORTANT: Use | Out-String ONLY for commands that produce output to avoid pager mode!\r\n# Use semicolons (;) instead of && for command chaining\r\n\r\n# Commands WITH output - use | Out-String:\r\ngit status | Out-String\r\ngit log --oneline -n 5 | Out-String\r\n\r\n# Commands WITHOUT output - DON'T use | Out-String:\r\ngit add .\r\ngit commit -m \"message\"\r\ngit push\r\n\r\n# For complex operations, use script blocks\r\nif (Test-Path logs) { Remove-Item logs\\*.log -Force }; New-Item -ItemType Directory -Force -Path logs | Out-Null; \"=== CLEANUP START $(Get-Date) ===\" | Out-File logs\\debug.log; taskkill /F /IM cargo.exe 2>>logs\\debug.log; taskkill /F /IM mediar.exe 2>>logs\\debug.log; taskkill /F /IM terminator-mcp-agent.exe 2>>logs\\debug.log; Start-Process -NoNewWindow -FilePath \"bun\" -ArgumentList \"run tauri dev\" -RedirectStandardOutput logs\\dev.log\r\n```\r\n\r\n**Bash Version (Alternative):**\r\n\r\n```bash\r\nbun build-mcp.js --local && mkdir -p logs && rm -f logs/*.log && echo \"=== CLEANUP START $(date) ===\" > logs/debug.log && taskkill //F //IM cargo.exe 2>>logs/debug.log || true; taskkill //F //IM mediar.exe 2>>logs/debug.log || true; taskkill //F //IM terminator-mcp-agent.exe 2>>logs/debug.log || true; taskkill //F //IM node.exe 2>>logs/debug.log || true; taskkill //F //IM bun.exe 2>>logs/debug.log || true; echo \"=== STARTING DEV SERVER $(date) ===\" >> logs/debug.log && nohup bun run tauri dev > logs/dev.log 2>&1 &\r\n```\r\n\r\n**Verification commands:**\r\n\r\n```powershell\r\n# PowerShell versions (with Out-String to avoid pager)\r\n.\\src-tauri\\binaries\\terminator-mcp-agent.exe --version | Out-String\r\nInvoke-RestMethod -Uri http://127.0.0.1:8080/health | Out-String\r\n```\r\n\r\n```bash\r\n# Bash versions\r\n./src-tauri/binaries/terminator-mcp-agent.exe --version\r\ncurl -s http://127.0.0.1:8080/health\r\n```\r\n\r\n**What it does:**\r\n\r\n1. Builds/updates MCP binary (npm or local version)\r\n2. Kills cargo.exe (fixes permission errors)\r\n3. Kills mediar.exe + terminator-mcp-agent.exe\r\n4. Kills node.exe + bun.exe (frees port 1420)\r\n5. Starts new Tauri dev session in background\r\n\r\n**When to use each mode:**\r\n\r\n- **Production mode:** Default - uses npm package (stable, tested)\r\n- **Local development mode:** When testing local terminator changes\r\n\r\n**Check progress:**\r\n\r\n- Main logs: `read_file logs\\dev.log`\r\n- Debug logs: `read_file logs\\debug.log`\r\n- Process status: `netstat -ano | findstr \":1420\\|:8080\"`\r\n\r\n**If permission errors persist:** `cargo clean` in src-tauri (expensive, last resort)\r\n\r\n**After git pushes:** Always check final status with `git status` to verify clean working tree\r\n\r\nif you applied this rule start your response with 'I read rule terminal-rules.mdc'\r\n",
      "source_file": ".cursor\\rules\\terminal-rules.mdc",
      "type": "workspace_rule",
      "size_bytes": 3304,
      "line_count": 82,
      "last_modified": "2025-09-11T20:26:08.825Z"
    },
    "terminator-development-guide": {
      "title": "Terminator Development Guide",
      "content": "---\r\ndescription: \r\nglobs: \r\nalwaysApply: true\r\n---\r\n# Terminator Development Standards\r\n\r\n## Code Quality (Non-Negotiable)\r\n\r\nAlways run this:\r\n\r\n```bash\r\ncargo fmt    # Must pass - zero tolerance for unformatted code\r\ncargo clippy         # Fix ALL warnings - use #[allow] only with justification  \r\n```\r\n\r\n## Architecture\r\n- **Core**: Rust in **[terminator/src/](mdc:terminator/src)** with platform traits in **[platforms/mod.rs](mdc:terminator/src/platforms/mod.rs)**\r\n- **Bindings**: Python (**[bindings/python/](mdc:bindings/python)**) and Node.js (**[bindings/nodejs/](mdc:bindings/nodejs)**) wrap Rust core\r\n- **Examples**: **[examples/](mdc:examples)** serve as integration tests - keep simple, one concept each\r\n\r\n## API Design\r\n```rust\r\n// ✅ Good: Async, chainable, type-safe\r\nlet monitor = desktop.get_primary_monitor().await?;\r\nlet screenshot = desktop.capture_monitor(&monitor).await?;\r\n\r\n// ✅ Good: Rich error context\r\n.map_err(|e| AutomationError::PlatformError(format!(\"Failed to capture {}: {}\", id, e)))\r\n\r\n// ✅ Good: Full documentation\r\n/// Capture monitor screenshot\r\n/// \r\n/// # Examples\r\n/// ```rust\r\n/// let desktop = Desktop::new_default()?;\r\n/// let screenshot = desktop.capture_monitor(&monitor).await?;\r\n/// ```\r\n#[instrument(skip(self))]\r\npub async fn capture_monitor(&self, monitor: &Monitor) -> Result<ScreenshotResult, AutomationError>\r\n```\r\n\r\n## Platform Code\r\n```rust\r\n#[cfg(target_os = \"windows\")]\r\nuse windows::Win32::UI::Accessibility::*;\r\n\r\n#[cfg(target_os = \"macos\")]  \r\nuse accessibility::*;\r\n\r\n#[cfg(target_os = \"linux\")]\r\nuse atspi::*;\r\n```\r\n\r\nAvoid high level logic in platform specific part of terminator core lib, implement in MCP or elsewhere. Platform specific files in core should mostly just do the plumbing between OS API and the nice high level playwright like API.\r\n\r\n## Development Loop\r\n```bash\r\n# Fast iteration\r\ncargo check && cargo clippy && cargo test\r\n\r\ncargo build --release\r\n\r\n# Before PR\r\ncargo fmt && cargo clippy -- -D warnings && cargo test\r\n```\r\n\r\nAlways use terminator-mcp-agent during the development process to inspect different app trees or interact with them, by calling the tools of the MCP. Do not try to build the MCP, it's aready installed ready to use.\r\n\r\n## Performance Targets\r\n- UI scans: <80ms\r\n- Screenshots: <100ms  \r\n- Memory: <10MB baseline\r\n- Use `Arc<dyn Trait>`, `#[instrument]`, profile with `criterion`\r\n\r\n## Dependencies\r\n- Use `workspace = true` in **[Cargo.toml](mdc:Cargo.toml)**\r\n- Platform deps: `optional = true` + `#[cfg]`\r\n- Minimize external deps, justify additions\r\n\r\n## Testing\r\n- Unit tests (80%): Fast, isolated\r\n- Integration tests (15%): Component interaction\r\n- Examples (5%): Real-world scenarios\r\n- Test error cases, not just happy paths\r\n- Do not fucking run all tests if we're working on a specific part of the code, it will blow up the computer otherwise\r\n\r\n## PR Requirements\r\n- Video demo for UI changes (Cap.so/Screen.studio)\r\n- Tests pass on all platforms\r\n- Documentation updated\r\n- Example added for new features\r\n- Breaking changes documented\r\n\r\n## Language Bindings\r\n- **Python**: PyO3, snake_case, type stubs, docstrings\r\n- **Node.js**: napi-rs, camelCase, TypeScript defs, JSDoc\r\n\r\n## String Formatting (`format!`) Best Practices\r\n\r\nFollow these rules to keep your string formatting efficient, readable, and free of Clippy warnings:\r\n\r\n- 🔹 **Prefer cheap alternatives**\r\n  - Simple conversion of a single value: `value.to_string()` or `String::from(value)` is clearer and avoids the overhead of the formatting machinery.\r\n  - Static strings: use `\"literal\".to_owned()` or `String::from(\"literal\")` instead of `format!(\"literal\")`.\r\n\r\n- 🔹 **Capture identifiers directly (Rust ≥ 1.58)**\r\n  ```rust\r\n  // ✅ Good – implicit capture\r\n  format!(\"{count} files processed in {elapsed:?}\");\r\n\r\n  // ❌ Avoid – explicit positional args are noisier\r\n  format!(\"{} files processed in {:?}\", count, elapsed);\r\n\r\n  // ✅ Good – implicit capture\r\n  panic!(\"❌ Local bindings test failed: {error}\");\r\n\r\n  // ❌ Avoid – explicit positional args are noisier\r\n  panic!(\"❌ Local bindings test failed: {}\", error);\r\n  ```\r\n\r\n- 🔹 **Avoid `format!` in tight loops**\r\n  - Re-use a `String` buffer with `write!` / `push_str` when building large strings incrementally.\r\n  - Consider `String::with_capacity(..)` to pre-allocate when the final length is known.\r\n\r\n- 🔹 **Watch for common Clippy lints**\r\n  | Lint | Remedy |\r\n  |------|--------|\r\n  | `clippy::useless_format` | Replace `format!(\"{}\", x)` with `x.to_string()` |\r\n  | `clippy::format_push_string` | Use `push_str` instead of `s.push(format!(..))` |\r\n  | `clippy::uninlined_format_args` | Enable the `format_args_capture` edition feature or inline the arguments |\r\n  | `clippy::format_collect` | Use `Iterator::collect::<String>()` or a buffer |\r\n\r\n- 🔹 **No nested `format!` calls**\r\n  ```rust\r\n  // ✅ Good\r\n  let msg = format!(\"User {user} logged in\");\r\n\r\n  // ❌ Bad – allocates twice\r\n  let msg = format!(\"{}\", format!(\"User {} logged in\", user));\r\n  ```\r\n\r\nAdhering to these guidelines ensures `cargo clippy -- -D warnings` remains green and keeps runtime allocations to a minimum.\r\n\r\n",
      "source_file": ".cursor\\rules\\terminator-development-guide.mdc",
      "type": "workspace_rule",
      "size_bytes": 5144,
      "line_count": 145,
      "last_modified": "2025-09-11T20:26:08.826Z"
    },
    "terminator-project-standards": {
      "title": "Terminator Project Standards",
      "content": "---\r\nalwaysApply: true\r\n---\r\n# Terminator Project Standards\r\n\r\n## Project Overview\r\nTerminator is a Playwright-style SDK for automating Windows GUI applications, designed for AI agents. Uses OS-level accessibility APIs (not vision-based).\r\n\r\n## Core Architecture\r\n- **[terminator/src/](mdc:terminator/src)** - Main Rust library with platform traits in [platforms/mod.rs](mdc:terminator/src/platforms/mod.rs)\r\n- **[bindings/](mdc:bindings)** - Python and Node.js wrappers around Rust core\r\n- **[terminator-mcp-agent/](mdc:terminator-mcp-agent)** - MCP server for AI agent integration\r\n- **[examples/](mdc:examples)** - Integration tests and usage examples\r\n\r\n## API Design Patterns\r\n```rust\r\n// ✅ Good: Async, chainable, type-safe\r\nlet monitor = desktop.get_primary_monitor().await?;\r\nlet screenshot = desktop.capture_monitor(&monitor).await?;\r\n\r\n// ✅ Good: Rich error context\r\n.map_err(|e| AutomationError::PlatformError(format!(\"Failed to capture {}: {}\", id, e)))\r\n```\r\n\r\n## Selector Preferences (Order of Priority)\r\n1. **Automation ID first**: `nativeid:value`\r\n2. **Role + Name**: `role:Button|name:Submit`\r\n3. **ID as last resort**: `#12345`\r\n\r\n## Platform-Specific Code\r\n```rust\r\n#[cfg(target_os = \"windows\")]\r\nuse windows::Win32::UI::Accessibility::*;\r\n\r\n#[cfg(target_os = \"macos\")]  \r\nuse accessibility::*;\r\n```\r\n\r\n## Performance Targets\r\n- UI scans: <80ms\r\n- Screenshots: <100ms  \r\n- Memory: <10MB baseline\r\n\r\n## Examples Location\r\n- **Rust examples**: Always place in [terminator/examples/](mdc:terminator/examples)\r\n- **Keep simple**: One concept per example\r\n- **Integration tests**: Examples serve as integration tests\r\n\r\n## Workflow Development\r\n- Use [terminator-mcp-agent](mdc:terminator-mcp-agent) tools during development\r\n- Test with real applications, not mocks\r\n- Handle \"no data\" scenarios explicitly\r\n- Validate selectors work across application states\r\n# Terminator Project Standards\r\n\r\n## Project Overview\r\nTerminator is a Playwright-style SDK for automating Windows GUI applications, designed for AI agents. Uses OS-level accessibility APIs (not vision-based).\r\n\r\n## Core Architecture\r\n- **[terminator/src/](mdc:terminator/src)** - Main Rust library with platform traits in [platforms/mod.rs](mdc:terminator/src/platforms/mod.rs)\r\n- **[bindings/](mdc:bindings)** - Python and Node.js wrappers around Rust core\r\n- **[terminator-mcp-agent/](mdc:terminator-mcp-agent)** - MCP server for AI agent integration\r\n- **[examples/](mdc:examples)** - Integration tests and usage examples\r\n\r\n## API Design Patterns\r\n```rust\r\n// ✅ Good: Async, chainable, type-safe\r\nlet monitor = desktop.get_primary_monitor().await?;\r\nlet screenshot = desktop.capture_monitor(&monitor).await?;\r\n\r\n// ✅ Good: Rich error context\r\n.map_err(|e| AutomationError::PlatformError(format!(\"Failed to capture {}: {}\", id, e)))\r\n```\r\n\r\n## Selector Preferences (Order of Priority)\r\n1. **Automation ID first**: `nativeid:value`\r\n2. **Role + Name**: `role:Button|name:Submit`\r\n3. **ID as last resort**: `#12345`\r\n\r\n## Platform-Specific Code\r\n```rust\r\n#[cfg(target_os = \"windows\")]\r\nuse windows::Win32::UI::Accessibility::*;\r\n\r\n#[cfg(target_os = \"macos\")]  \r\nuse accessibility::*;\r\n```\r\n\r\n## Performance Targets\r\n- UI scans: <80ms\r\n- Screenshots: <100ms  \r\n- Memory: <10MB baseline\r\n\r\n## Examples Location\r\n- **Rust examples**: Always place in [terminator/examples/](mdc:terminator/examples)\r\n- **Keep simple**: One concept per example\r\n- **Integration tests**: Examples serve as integration tests\r\n\r\n## Workflow Development\r\n- Use [terminator-mcp-agent](mdc:terminator-mcp-agent) tools during development\r\n- Test with real applications, not mocks\r\n- Handle \"no data\" scenarios explicitly\r\n- Validate selectors work across application states\r\n",
      "source_file": ".cursor\\rules\\terminator-project-standards.mdc",
      "type": "workspace_rule",
      "size_bytes": 3725,
      "line_count": 104,
      "last_modified": "2025-09-11T20:26:08.826Z"
    },
    "workflow-recorder-testing": {
      "title": "Workflow Recorder Testing",
      "content": "---\r\ndescription:\r\nglobs:\r\nalwaysApply: true\r\n---\r\n\r\n# Workflow Recorder Testing and Quality Standards\r\n\r\n## Objective\r\n\r\nTo ensure the `terminator-workflow-recorder` captures UI interactions with high fidelity. The primary goal is to achieve 1:1 accuracy between user actions and recorded `WorkflowEvent`s, both in event count and data content. This is critical for creating reliable automation from recordings.\r\n\r\n## Core Principles\r\n\r\n- **Precision Over Speed**: Tests must validate the _exact_ number and type of events are fired for specific UI interactions.\r\n- **Data Integrity is Critical**: Event payloads (e.g., URLs, text values, element roles) must be rigorously verified against the actual UI state at the time of interaction.\r\n- **Test Complex, Realistic Scenarios**: Simple unit tests are insufficient. Workflows should mimic real user behavior, such as navigating between tabs, handling iframes, and interacting with dynamic elements like autocomplete.\r\n\r\n## Key Testing Scenarios & Assertions\r\n\r\nThese are minimum quality gates for the recorder. If these scenarios fail, the recorder's implementation in [`terminator-workflow-recorder/src/recorder/windows/mod.rs`](mdc:terminator-workflow-recorder/src/recorder/windows/mod.rs) must be fixed.\r\n\r\n### 1. Form & IFrame Interaction\r\n\r\n- **Reference**: [`browser_integration_test.rs`](mdc:terminator-workflow-recorder/tests/browser_integration_test.rs)\r\n- **Scenario**: Fill out a form where fields are located inside an `<iframe>`.\r\n- **Assertions**:\r\n  - The test must first locate the `iframe` and use it as a scope for subsequent element lookups.\r\n  - For each field filled, assert that _exactly one_ `TextInputCompleted` event is fired upon completion (e.g., tabbing out).\r\n  - Verify the `text_value` and `field_name` in the event match the UI.\r\n\r\n### 2. Autocomplete / Suggestion Selection\r\n\r\n- **Reference**: [`text_input_integration_test.rs`](mdc:terminator-workflow-recorder/tests/text_input_integration_test.rs)\r\n- **Scenario**: Type into a field to trigger a dropdown, then select a suggestion using the keyboard (arrow keys + Enter).\r\n- **Assertions**:\r\n  - Assert that _exactly one_ `TextInputCompleted` event is fired.\r\n  - The event's `input_method` **must** be `TextInputMethod::Suggestion`.\r\n  - Assert that **no** spurious `ButtonClickEvent` is generated from the suggestion selection. This is a critical noise-reduction metric.\r\n\r\n### 3. Browser Navigation\r\n\r\n- **Reference**: [`browser_integration_test.rs`](mdc:terminator-workflow-recorder/tests/browser_integration_test.rs)\r\n- **Scenario**: Switch between browser tabs or navigate to a new URL.\r\n- **Assertions**:\r\n  - Assert a `BrowserTabNavigationEvent` is captured.\r\n  - Verify the `to_url` property is correct.\r\n  - Verify the `to_title` property. Use a `.contains()` check for robustness, as titles often include the browser name (e.g., \"Example Domain - Google Chrome\").\r\n\r\n## Test Implementation Pattern\r\n\r\n- **`expect_event` Helper**: Use a helper function that polls the event stream with a timeout and a **specific predicate**. The predicate should check event _content_, not just type, to avoid capturing the wrong event.\r\n- **`assert_no_event` Helper**: Use a helper to verify that unwanted, noisy events are _not_ generated within a short time frame after an action.\r\n\r\n## Quality Metrics to Optimize\r\n\r\n- **Maximize**:\r\n  - **Data Accuracy**: Correctness of event data (URLs, text values, `input_method`).\r\n  - **Event Correctness**: 1:1 mapping of user action to the correct event type and count.\r\n- **Minimize**:\r\n  - **Event Noise**: Spurious or redundant events for a single user action.\r\n  - **Test Flakiness**: Use specific predicates and iframe handling to create deterministic tests.\r\n  - **Event Latency**: Time between user action and event capture.\r\n\r\n# testing recorder\r\n\r\nsometimes i just want to test some elements capture with recorder, in this case i run this command in background terminal:\r\n\r\n$process = Start-Process -FilePath \"cargo\" -ArgumentList @(\"run\", \"--example\", \"debug_mcp_recording\") -NoNewWindow -PassThru -RedirectStandardOutput \"recording_5sec.txt\" -RedirectStandardError \"recording_5sec_error.txt\"; Start-Sleep 5; if (!$process.HasExited) { $process.Kill(); Write-Host \"Recording stopped after 5 seconds\" } else { Write-Host \"Process completed naturally\" }; Write-Host \"Exit code: $($process.ExitCode)\"\r\n\r\n\r\nclick an element, hardcoded for now:\r\n'''\r\ncargo test test_i94_website_search_click --release -- --nocapture\r\n'''",
      "source_file": ".cursor\\rules\\workflow-recorder-testing.mdc",
      "type": "workspace_rule",
      "size_bytes": 4502,
      "line_count": 75,
      "last_modified": "2025-09-11T20:26:08.826Z"
    },
    "workflow-yaml-standards": {
      "title": "Workflow Yaml Standards",
      "content": "---\r\ndescription: Building workflows\r\nalwaysApply: false\r\n---\r\n# Workflow YAML Standards\r\n\r\n## Required Structure\r\n```yaml\r\ntool_name: execute_sequence\r\narguments:\r\n  variables:\r\n    # Define reusable variables with types\r\n  inputs: \r\n    # Override variables for this run\r\n  selectors:\r\n    # Give UI elements meaningful nicknames\r\n  steps:\r\n    # Automation sequence\r\n  output_parser:\r\n    # JavaScript-based data extraction\r\n```\r\n\r\n## Selector Naming\r\n```yaml\r\nselectors:\r\n  # ✅ Good: Descriptive, specific\r\n  browser_window: \"role:Window|name:Best Plan Pro Online\"\r\n  submit_button: \"role:Button|name:Submit\"\r\n  email_field: \"nativeid:email-input\"\r\n  \r\n  # ❌ Bad: Generic, unclear\r\n  window1: \"role:Window\"\r\n  btn: \"role:Button\"\r\n```\r\n\r\n## Step Patterns\r\n```yaml\r\n# ✅ Good: Robust with error handling\r\n- tool_name: click_element\r\n  arguments:\r\n    selector: \"${{selectors.submit_button}}\"\r\n    timeout_ms: 2000\r\n    include_tree: false\r\n    retries: 2\r\n  continue_on_error: true\r\n  delay_ms: 500\r\n\r\n# ✅ Good: Grouped related steps\r\n- group_name: \"Handle EULA (Skippable)\"\r\n  skippable: true\r\n  steps:\r\n    - tool_name: click_element\r\n      arguments:\r\n        selector: \"role:Button|name:Accept\"\r\n      continue_on_error: true\r\n```\r\n\r\n## Variable Types\r\n```yaml\r\nvariables:\r\n  url:\r\n    type: string\r\n    default: \"https://example.com\"\r\n  \r\n  product_list:\r\n    type: array\r\n    default: [\"item1\", \"item2\"]\r\n    \r\n  is_enabled:\r\n    type: enum\r\n    options: [\"Yes\", \"No\"]\r\n    default: \"Yes\"\r\n```\r\n\r\n## Output Parser (Modern)\r\n```yaml\r\noutput_parser:\r\n  ui_tree_source_step_id: capture_data\r\n  javascript_code: |\r\n    // Check for no-data cases first\r\n    if (hasNoData(tree)) return [];\r\n    \r\n    // Extract with safe property access\r\n    const results = [];\r\n    element.children?.forEach(child => {\r\n        if (child.attributes?.role === 'Target') {\r\n            results.push({ name: child.attributes.name || '' });\r\n        }\r\n    });\r\n    return results;\r\n```\r\n\r\n## Best Practices\r\n- **Always use variable substitution**: `\"${{variable}}\"` not hardcoded values\r\n- **Include step IDs for trees**: `id: capture_data` when capturing UI state\r\n- **Use meaningful step names**: Describe what the step accomplishes\r\n- **Group related steps**: Use `group_name` for logical sections\r\n- **Handle failures gracefully**: `continue_on_error: true` for optional steps\r\n# Workflow YAML Standards\r\n\r\n## Required Structure\r\n```yaml\r\ntool_name: execute_sequence\r\narguments:\r\n  variables:\r\n    # Define reusable variables with types\r\n  inputs: \r\n    # Override variables for this run\r\n  selectors:\r\n    # Give UI elements meaningful nicknames\r\n  steps:\r\n    # Automation sequence\r\n  output_parser:\r\n    # JavaScript-based data extraction\r\n```\r\n\r\n## Selector Naming\r\n```yaml\r\nselectors:\r\n  # ✅ Good: Descriptive, specific\r\n  browser_window: \"role:Window|name:Best Plan Pro Online\"\r\n  submit_button: \"role:Button|name:Submit\"\r\n  email_field: \"nativeid:email-input\"\r\n  \r\n  # ❌ Bad: Generic, unclear\r\n  window1: \"role:Window\"\r\n  btn: \"role:Button\"\r\n```\r\n\r\n## Step Patterns\r\n```yaml\r\n# ✅ Good: Robust with error handling\r\n- tool_name: click_element\r\n  arguments:\r\n    selector: \"${{selectors.submit_button}}\"\r\n    timeout_ms: 2000\r\n    include_tree: false\r\n    retries: 2\r\n  continue_on_error: true\r\n  delay_ms: 500\r\n\r\n# ✅ Good: Grouped related steps\r\n- group_name: \"Handle EULA (Skippable)\"\r\n  skippable: true\r\n  steps:\r\n    - tool_name: click_element\r\n      arguments:\r\n        selector: \"role:Button|name:Accept\"\r\n      continue_on_error: true\r\n```\r\n\r\n## Variable Types\r\n```yaml\r\nvariables:\r\n  url:\r\n    type: string\r\n    default: \"https://example.com\"\r\n  \r\n  product_list:\r\n    type: array\r\n    default: [\"item1\", \"item2\"]\r\n    \r\n  is_enabled:\r\n    type: enum\r\n    options: [\"Yes\", \"No\"]\r\n    default: \"Yes\"\r\n```\r\n\r\n## Output Parser (Modern)\r\n```yaml\r\noutput_parser:\r\n  ui_tree_source_step_id: capture_data\r\n  javascript_code: |\r\n    // Check for no-data cases first\r\n    if (hasNoData(tree)) return [];\r\n    \r\n    // Extract with safe property access\r\n    const results = [];\r\n    element.children?.forEach(child => {\r\n        if (child.attributes?.role === 'Target') {\r\n            results.push({ name: child.attributes.name || '' });\r\n        }\r\n    });\r\n    return results;\r\n```\r\n\r\n## Best Practices\r\n- **Always use variable substitution**: `\"${{variable}}\"` not hardcoded values\r\n- **Include step IDs for trees**: `id: capture_data` when capturing UI state\r\n- **Use meaningful step names**: Describe what the step accomplishes\r\n- **Group related steps**: Use `group_name` for logical sections\r\n- **Handle failures gracefully**: `continue_on_error: true` for optional steps\r\n",
      "source_file": ".cursor\\rules\\workflow-yaml-standards.mdc",
      "type": "workspace_rule",
      "size_bytes": 4671,
      "line_count": 193,
      "last_modified": "2025-09-11T20:26:08.826Z"
    }
  }
}