---
# Web monitoring workflow that skips if no changes detected
name: Website Change Monitor
description: Monitors a website for changes and triggers actions only when changes are detected

# Run every 5 minutes
cron: "*/5 * * * *"

variables:
  target_url:
    label: "Website URL to monitor"
    default: "https://example.com"
  
inputs:
  target_url: "{{target_url}}"

steps:
  # Fetch current website content
  - tool_name: run_command
    arguments:
      command: "curl -s '{{target_url}}' | md5sum | cut -d' ' -f1"
    id: get_current_hash
    
  # Read previous hash from cache file (if exists)
  - tool_name: run_command
    arguments:
      command: "test -f /tmp/web_monitor_hash.txt && cat /tmp/web_monitor_hash.txt || echo 'FIRST_RUN'"
    id: get_previous_hash
    
  # Save current hash for next run
  - tool_name: run_command
    arguments:
      command: "echo '{{get_current_hash.result}}' > /tmp/web_monitor_hash.txt"
    id: save_hash
    
  # If changed, fetch full content for analysis
  - tool_name: run_command
    arguments:
      command: "curl -s '{{target_url}}'"
    id: fetch_content
    condition: "{{get_previous_hash.result}} != {{get_current_hash.result}}"

# Output parser to determine if workflow should skip
output_parser:
  javascript_code: |
    // Get the hash comparison results
    const currentHashStep = sequenceResult.results?.find(r => r.step_id === 'get_current_hash');
    const previousHashStep = sequenceResult.results?.find(r => r.step_id === 'get_previous_hash');
    
    const currentHash = currentHashStep?.result?.content?.[0]?.text?.trim() || '';
    const previousHash = previousHashStep?.result?.content?.[0]?.text?.trim() || '';
    
    // Check if this is the first run
    if (previousHash === 'FIRST_RUN') {
      return {
        skipped: false,
        success: true,
        message: "Initial baseline established for website monitoring",
        data: {
          action: "baseline_set",
          hash: currentHash,
          timestamp: new Date().toISOString()
        }
      };
    }
    
    // Check if content has changed
    const hasChanged = currentHash !== previousHash;
    
    if (!hasChanged) {
      // No changes detected - skip processing
      return {
        skipped: true,
        success: false,
        message: "No changes detected - monitoring skipped",
        data: {
          reason: "Website content unchanged since last check",
          hash: currentHash,
          checked_at: new Date().toISOString()
        }
      };
    }
    
    // Changes detected - trigger processing
    const fetchStep = sequenceResult.results?.find(r => r.step_id === 'fetch_content');
    const contentFetched = fetchStep?.status === 'success';
    
    return {
      skipped: false,
      success: contentFetched,
      message: "Website changes detected and processed",
      data: {
        action: "changes_detected",
        previous_hash: previousHash,
        current_hash: currentHash,
        content_fetched: contentFetched,
        detected_at: new Date().toISOString()
      },
      validation: {
        change_detected: true,
        monitoring_active: true
      }
    };