---
tool_name: execute_sequence
arguments:
  steps:
    # Basic command execution
    - tool_name: run_command
      arguments:
        run: echo "Hello from GitHub Actions-style syntax!"

    # Multi-line script
    - tool_name: run_command
      arguments:
        run: |
          echo "Starting deployment process..."
          echo "Current directory: $(pwd)"
          echo "Listing files:"
          ls -la
          echo "Deployment complete!"

    # Using PowerShell on Windows
    - tool_name: run_command
      arguments:
        run: |
          Write-Host "System Information:"
          Get-ComputerInfo | Select-Object -Property CsName, OsName, OsVersion
        shell: powershell

    # Python script execution
    - tool_name: run_command
      arguments:
        run: |
          import sys
          import platform
          print(f"Python {sys.version}")
          print(f"Platform: {platform.system()}")
        shell: python

    # Node.js script execution
    - tool_name: run_command
      arguments:
        run: |
          console.log('Node.js version:', process.version);
          console.log('Platform:', process.platform);
        shell: node

    # Working with specific directories
    - tool_name: run_command
      arguments:
        run: npm list --depth=0
        working_directory: ./my-project

    # Checking git status
    - tool_name: run_command
      arguments:
        run: |
          git status
          git branch --show-current
        working_directory: ./

    # File operations
    - tool_name: run_command
      arguments:
        run: |
          # Create a temporary file
          echo "Test content" > temp_test.txt

          # Read the file
          cat temp_test.txt

          # Clean up
          rm temp_test.txt
        shell: bash

    # Cross-platform compatible script
    - tool_name: run_command
      arguments:
        run: |
          echo "This works on any platform!"
          echo "Current time: $(date)"

    # Chained commands with error handling
    - tool_name: run_command
      arguments:
        run: |
          echo "Step 1: Checking environment" &&
          echo "Step 2: Running tests" &&
          echo "Step 3: All tests passed!"
        shell: bash

  stop_on_error: false
