name: Publish Windows Docker Image

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Custom tag for the Docker image'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/terminator-mcp-agent-windows

jobs:
  build-and-push:
    runs-on: windows-2022
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Windows version and Docker info
        run: |
          Write-Output "Windows Version:"
          Get-WmiObject -Class Win32_OperatingSystem | Select-Object Version, BuildNumber, OSArchitecture
          Write-Output "`nDocker Version:"
          docker version
          Write-Output "`nDocker Info:"
          docker info
        shell: powershell

      - name: Switch to Windows containers
        run: |
          & "C:\Program Files\Docker\Docker\DockerCli.exe" -SwitchDaemon
        shell: powershell
        continue-on-error: true

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
            type=sha,prefix={{branch}}-

      - name: Build Docker image
        id: build
        run: |
          docker build -t temp-image -f ./docker/Dockerfile.windows .
          
      - name: Tag and push Docker image  
        run: |
          $tags = "${{ steps.meta.outputs.tags }}" -split "`n"
          foreach ($tag in $tags) {
            if ($tag.Trim()) {
              docker tag temp-image $tag.Trim()
              docker push $tag.Trim()
              Write-Output "Pushed: $($tag.Trim())"
            }
          }
        shell: powershell

      - name: Get image digest
        id: digest
        run: |
          $digest = docker inspect temp-image --format='{{index .RepoDigests 0}}' 2>$null
          if (-not $digest) {
            $digest = docker inspect temp-image --format='{{.Id}}'
          }
          echo "digest=$digest" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.digest.outputs.digest }}
          push-to-registry: true 