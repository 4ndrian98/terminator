# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing

class ClickResult:
    r"""
    Result of a click operation.
    """
    method: builtins.str
    coordinates: typing.Optional[tuple[builtins.float, builtins.float]]
    details: builtins.str

class CommandOutput:
    r"""
    Result of a command execution.
    """
    exit_status: typing.Optional[builtins.int]
    stdout: builtins.str
    stderr: builtins.str

class Desktop:
    r"""
    Main entry point for desktop automation.
    """
    def __new__(cls,): ...
    def root(self) -> UIElement:
        r"""
        Returns the root UI element.
        """
        ...

    def applications(self) -> builtins.list[UIElement]:
        r"""
        Returns a list of top-level application UI elements.
        """
        ...

    def application(self, name:builtins.str) -> UIElement:
        r"""
        Returns the UI element for the given application name.
        """
        ...

    def open_application(self, name:builtins.str) -> None:
        r"""
        Opens an application by name.
        """
        ...

    def activate_application(self, name:builtins.str) -> None:
        r"""
        Activates an application by name.
        """
        ...

    def locator(self, selector:builtins.str) -> Locator:
        r"""
        Returns a Locator for the given selector string.
        """
        ...

    def capture_screen(self) -> typing.Any:
        r"""
        Async: Capture a screenshot of the primary monitor.
        """
        ...

    def run_command(self, windows_command:typing.Optional[builtins.str], unix_command:typing.Optional[builtins.str]) -> typing.Any:
        ...

    def capture_monitor_by_name(self, name:builtins.str) -> typing.Any:
        ...

    def ocr_image_path(self, image_path:builtins.str) -> typing.Any:
        ...

    def ocr_screenshot(self, screenshot:ScreenshotResult) -> typing.Any:
        ...

    def find_window_by_criteria(self, title_contains:typing.Optional[builtins.str], timeout_ms:typing.Optional[builtins.int]) -> typing.Any:
        ...

    def get_current_browser_window(self) -> typing.Any:
        ...

    def get_current_window(self) -> typing.Any:
        ...

    def get_current_application(self) -> typing.Any:
        ...


class Locator:
    r"""
    Locator for finding UI elements by selector.
    """
    def first(self) -> typing.Any:
        ...

    def all(self, timeout_ms:typing.Optional[builtins.int], depth:typing.Optional[builtins.int]) -> typing.Any:
        ...

    def wait(self, timeout_ms:typing.Optional[builtins.int]) -> typing.Any:
        ...

    def timeout(self, timeout_ms:builtins.int) -> Locator:
        ...

    def locator(self, selector:builtins.str) -> Locator:
        ...


class ScreenshotResult:
    r"""
    Result of a screenshot operation.
    """
    width: builtins.int
    height: builtins.int
    image_data: builtins.list[builtins.int]

class UIElement:
    r"""
    Represents a UI element in the desktop UI tree.
    """
    role: builtins.str
    name: typing.Optional[builtins.str]
    bounds: tuple[builtins.float, builtins.float, builtins.float, builtins.float]
    def children(self) -> builtins.list[UIElement]:
        ...

    def parent(self) -> typing.Optional[UIElement]:
        ...

    def click(self) -> None:
        ...

    def is_visible(self) -> builtins.bool:
        ...

    def is_enabled(self) -> builtins.bool:
        ...

    def focus(self) -> None:
        ...

    def text(self, max_depth:typing.Optional[builtins.int]) -> builtins.str:
        ...

    def type_text(self, text:builtins.str, use_clipboard:typing.Optional[builtins.bool]) -> None:
        ...

    def press_key(self, key:builtins.str) -> None:
        ...

    def set_value(self, value:builtins.str) -> None:
        ...

    def perform_action(self, action:builtins.str) -> None:
        ...

    def scroll(self, direction:builtins.str, amount:builtins.float) -> None:
        ...

    def activate_window(self) -> None:
        ...

    def is_focused(self) -> builtins.bool:
        ...

    def is_keyboard_focusable(self) -> builtins.bool:
        ...

    def mouse_drag(self, start_x:builtins.float, start_y:builtins.float, end_x:builtins.float, end_y:builtins.float) -> None:
        ...

    def mouse_click_and_hold(self, x:builtins.float, y:builtins.float) -> None:
        ...

    def mouse_move(self, x:builtins.float, y:builtins.float) -> None:
        ...

    def mouse_release(self) -> None:
        ...

    def locator(self, selector:builtins.str) -> typing.Any:
        ...

    def application(self) -> typing.Optional[UIElement]:
        r"""
        Get the containing application element
        """
        ...

    def window(self) -> typing.Optional[UIElement]:
        r"""
        Get the containing window element (e.g., tab, dialog)
        """
        ...


class ElementNotFoundError(RuntimeError): ...

class InternalError(RuntimeError): ...

class InvalidArgumentError(RuntimeError): ...

class PermissionDeniedError(RuntimeError): ...

class PlatformError(RuntimeError): ...

class TimeoutError(RuntimeError): ...

class UnsupportedOperationError(RuntimeError): ...

class UnsupportedPlatformError(RuntimeError): ...

