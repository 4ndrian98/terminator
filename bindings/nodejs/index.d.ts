/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface NodeBounds {
  x: number
  y: number
  width: number
  height: number
}
export interface NodeCoordinates {
  x: number
  y: number
}
export interface NodeClickResult {
  method: string
  coordinates?: NodeCoordinates
  details: string
}
export interface NodeCommandOutput {
  exitStatus?: number
  stdout: string
  stderr: string
}
export interface NodeScreenshotResult {
  width: number
  height: number
  imageData: Array<number>
}
/** Main entry point for desktop automation */
export declare class NodeDesktop {
  /** Create a new Desktop automation instance */
  constructor()
  /** Get the root UI element */
  root(): NodeUIElement
  /** List all running applications */
  applications(): Array<NodeUIElement>
  /** Get a running application by name */
  application(name: string): NodeUIElement
  /** Open an application by name */
  openApplication(name: string): void
  /** Activate an application by name */
  activateApplication(name: string): void
  /** Capture a screenshot of the primary monitor */
  captureScreen(): Promise<NodeScreenshotResult>
  /** Run a shell command */
  runCommand(windowsCommand?: string | undefined | null, unixCommand?: string | undefined | null): Promise<NodeCommandOutput>
  /** Capture a screenshot of a specific monitor */
  captureMonitorByName(name: string): Promise<NodeScreenshotResult>
  /** Perform OCR on an image file */
  ocrImagePath(imagePath: string): Promise<string>
  /** Perform OCR on a screenshot */
  ocrScreenshot(screenshot: NodeScreenshotResult): Promise<string>
  /** Find a window by criteria */
  findWindowByCriteria(titleContains?: string | undefined | null, timeoutMs?: number | undefined | null): Promise<NodeUIElement>
  /** Get the currently focused browser window */
  getCurrentBrowserWindow(): Promise<NodeUIElement>
  /** Create a locator for advanced queries */
  locator(selector: string): NodeLocator
}
export type NodeUIElement = NodeUiElement
/** A UI element in the accessibility tree */
export declare class NodeUiElement {
  /** The accessibility role */
  get role(): string
  /** The accessibility name */
  get name(): string | null
  /** Get children of this element */
  children(): Array<NodeUiElement>
  /** Get the parent element */
  parent(): NodeUiElement | null
  /** The bounding rectangle */
  get bounds(): NodeBounds
  /** Click the element (returns click result) */
  click(): NodeClickResult
  /** Is the element visible? */
  isVisible(): boolean
  /** Is the element enabled? */
  isEnabled(): boolean
  /** Focus the element */
  focus(): void
  /** Get the text content */
  text(maxDepth?: number | undefined | null): string
  /** Type text into the element */
  typeText(text: string, useClipboard?: boolean | undefined | null): void
  /** Press a key on the element */
  pressKey(key: string): void
  /** Set the value of the element */
  setValue(value: string): void
  /** Perform a custom action */
  performAction(action: string): void
  /** Scroll the element */
  scroll(direction: string, amount: number): void
  /** Activate the window containing this element */
  activateWindow(): void
  /** Is the element focused? */
  isFocused(): boolean
  /** Is the element keyboard focusable? */
  isKeyboardFocusable(): boolean
  /** Mouse drag from/to coordinates */
  mouseDrag(startX: number, startY: number, endX: number, endY: number): void
  /** Mouse click and hold */
  mouseClickAndHold(x: number, y: number): void
  /** Mouse move */
  mouseMove(x: number, y: number): void
  /** Mouse release */
  mouseRelease(): void
  /** Create a locator from this element */
  locator(selector: string): NodeLocator
}
/** Locator for advanced queries (chainable) */
export declare class NodeLocator {
  /** Get the first matching element (async) */
  first(): Promise<NodeUiElement>
  /** Get all matching elements (async) */
  all(timeoutMs?: number | undefined | null, depth?: number | undefined | null): Promise<Array<NodeUiElement>>
  /** Wait for the first matching element (async) */
  wait(timeoutMs?: number | undefined | null): Promise<NodeUiElement>
  /** Set a default timeout for this locator (returns a new locator) */
  timeout(timeoutMs: number): NodeLocator
  /** Chain another selector */
  locator(selector: string): NodeLocator
}
export type JsElementNotFoundError = ElementNotFoundError
/** Thrown when an element is not found. */
export declare class ElementNotFoundError {
  field0: string
}
export type JsTimeoutError = TimeoutError
/** Thrown when an operation times out. */
export declare class TimeoutError {
  field0: string
}
export type JsPermissionDeniedError = PermissionDeniedError
/** Thrown when permission is denied. */
export declare class PermissionDeniedError {
  field0: string
}
export type JsPlatformError = PlatformError
/** Thrown for platform-specific errors. */
export declare class PlatformError {
  field0: string
}
export type JsUnsupportedOperationError = UnsupportedOperationError
/** Thrown for unsupported operations. */
export declare class UnsupportedOperationError {
  field0: string
}
export type JsUnsupportedPlatformError = UnsupportedPlatformError
/** Thrown for unsupported platforms. */
export declare class UnsupportedPlatformError {
  field0: string
}
export type JsInvalidArgumentError = InvalidArgumentError
/** Thrown for invalid arguments. */
export declare class InvalidArgumentError {
  field0: string
}
export type JsInternalError = InternalError
/** Thrown for internal errors. */
export declare class InternalError {
  field0: string
}
